use std::ops::Range;

use crate::lang::surface::{Term, Literal, TypeEntry, TermEntry};
use crate::lang::surface::lexer::{LexerError, Token};

grammar<'input>;

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'input> {
        "doc comment" => Token::DocComment(<&'input str>),
        "character literal" => Token::CharLiteral(<&'input str>),
        "string literal" => Token::StrLiteral(<&'input str>),
        "numeric literal" => Token::NumLiteral(<&'input  str>),
        "name" => Token::Name(<&'input str>),
        "shift" => Token::Shift(<&'input str>),

        "as" => Token::As,
        "fun" => Token::FunTerm,
        "Fun" => Token::FunType,
        "record" => Token::RecordTerm,
        "Record" => Token::RecordType,

        "->"  => Token::Arrow,
        "=>"  => Token::DArrow,
        ":"   => Token::Colon,
        ","   => Token::Comma,
        "."   => Token::Dot,

        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBrack,
        "]" => Token::RBrack,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=" => Token::Equal,
    }
}

pub Term: Term<&'input str> = {
    ExprTerm,
    <term: ExprTerm> ":" <ty: Term> => Term::Ann(Box::new(term), Box::new(ty)),
};

ExprTerm: Term<&'input str> = {
    ArrowTerm,
    <start: @L> "fun" <input_names: InputName+> "=>" <output_term: ExprTerm> => {
        Term::FunctionTerm(start.., input_names, Box::new(output_term))
    },
};

ArrowTerm: Term<&'input str> = {
    AppTerm,
    <start: @L> "Fun" <input_type_groups: ("(" <InputName+> ":" <ArrowTerm> ")")+>
        "->" <output_type: ArrowTerm> =>
    {
        Term::FunctionType(start.., input_type_groups, Box::new(output_type))
    },
    <input_type: AppTerm> "->" <output_type: ArrowTerm> => {
        Term::FunctionArrowType(Box::new(input_type), Box::new(output_type))
    },
};

AppTerm: Term<&'input str> = {
    AtomicTerm,
    <head_term: AtomicTerm> <input_terms: AtomicTerm+> => {
        Term::FunctionElim(Box::new(head_term), input_terms)
    },
};

AtomicTerm: Term<&'input str> = {
    "(" <term: Term> ")" => term,
    <start: @L> <name: Name> <end: @R> => Term::Name(start..end, name),
    <start: @L> <term: AtomicTerm> <shift: "shift"> <end: @R> => {
        Term::Lift(start..end, Box::new(term), shift[1..].parse().unwrap()) // FIXME: Overflow!
    },
    <start: @L> "Record" "{" <entries: List<TypeEntry>> "}" <end: @R> => Term::RecordType(start..end, entries),
    <start: @L> "record" "{" <entries: List<TermEntry>> "}" <end: @R> => Term::RecordTerm(start..end, entries),
    <head_term: AtomicTerm> "." <label_start: @L> <label: Name> <end: @R> => {
        Term::RecordElim(Box::new(head_term), label_start..end, label)
    },
    <start: @L> "[" <entries: List<Term>> "]" <end: @R> => Term::Sequence(start..end, entries),
    <start: @L> <literal: Literal> <end: @R> => Term::Literal(start..end, literal),
};

List<Entry>: Vec<Entry> = {
    <mut entries: (<Entry> ",")*> <last: Entry?> => {
        entries.extend(last);
        entries
    }
}

TypeEntry: TypeEntry<&'input str> = {
    <_docs: "doc comment"*> <start: @L> <label: Name> <name: ("as" <Name>)?> <end: @R> ":" <term: Term> => {
        // TODO: Use doc comments
        (start..end, label, name, term)
    },
};

TermEntry: TermEntry<&'input str> = {
    <_docs: "doc comment"*> <start: @L> <label: Name> <end: @R> "=" <term: Term> => {
        // TODO: Use doc comments
        (start..end, label, term)
    },
};

InputName: (Range<usize>,&'input str) = {
    <start: @L> <name: Name> <end: @R> => (start..end, name),
};

Name: &'input str = {
    "name",
};

Literal: Literal<&'input str> = {
    "character literal" => Literal::Char(<>),
    "string literal" => Literal::String(<>),
    "numeric literal" => Literal::Number(<>),
};
